{"version":3,"sources":["pages/Home/logo.svg","pages/Home/index.js","pages/Redirect/RedirectLink/index.js","pages/Redirect/index.js","routes.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","src","logo","alt","href","target","rel","RedirectLink","LinkTo","Title","title","width","height","defaultProps","undefined","Redirect","UrlParams","useParams","useState","Links","setLinks","useEffect","decodedUrl","decodeURIComponent","link","ArrayLinks","JSON","parse","id","map","value","key","length","to","Router","basename","process","exact","path","component","PageHome","PageRedirect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,iPCyB5BC,MArBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kB,cCRR,SAASC,EAAT,GAA0C,IAAlBC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,MAC9B,OACE,uBAAGL,KAAMI,EAAQE,MAAOF,EAAQR,UAAU,gBACxC,yBACEG,IAAI,OACJQ,MAAM,OACNC,OAAO,OACPX,IAAG,mDAA8CO,KAEnD,2BAAIC,GAASD,IAUnBD,EAAaM,aAAe,CAC1BJ,WAAOK,GAGMP,Q,MCWAQ,MAjCf,WACE,IAAMC,EAAYC,cADA,EAEQC,mBAAS,IAFjB,mBAEXC,EAFW,KAEJC,EAFI,KASlB,OALAC,qBAAU,WACR,IAAMC,EAAaC,mBAAmBP,EAAUQ,MAC1CC,EAAaC,KAAKC,MAAML,GAC9BF,EAASK,KACR,IAED,yBAAKG,GAAG,sBACN,6CACA,yBAAKA,GAAG,mBACN,qCACA,yBAAKA,GAAG,aACLT,EAAMU,KAAI,SAACC,GACV,OACE,kBAAC,EAAD,CACEtB,OAAQsB,EAAMN,KACdf,MAAOqB,EAAMpB,MACbqB,IAAKD,EAAMN,KAAKQ,cAM1B,kBAAC,IAAD,CAAMC,GAAG,IAAIL,GAAG,YAAhB,iCCdSM,MAZf,WACE,OACE,kBAAC,IAAD,CAAYC,SAAUC,kBACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,kBAAkBC,UAAWE,IACzC,kBAAC,IAAD,CAAUR,GAAG,SCCDS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ac83c1d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './styles.css';\n\nfunction Home() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default Home;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport './styles.css';\n\nfunction RedirectLink({ LinkTo, Title }) {\n  return (\n    <a href={LinkTo} title={LinkTo} className=\"RedirectLink\">\n      <img\n        alt=\"Icon\"\n        width=\"30px\"\n        height=\"30px\"\n        src={`http://www.google.com/s2/favicons?domain=${LinkTo}`}\n      />\n      <p>{Title || LinkTo}</p>\n    </a>\n  );\n}\n\nRedirectLink.propTypes = {\n  LinkTo: PropTypes.string.isRequired,\n  Title: PropTypes.string,\n};\n\nRedirectLink.defaultProps = {\n  Title: undefined,\n};\n\nexport default RedirectLink;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport RedirectLink from './RedirectLink';\nimport './styles.css';\n\nfunction Redirect() {\n  const UrlParams = useParams();\n  const [Links, setLinks] = useState([]);\n\n  useEffect(() => {\n    const decodedUrl = decodeURIComponent(UrlParams.link);\n    const ArrayLinks = JSON.parse(decodedUrl);\n    setLinks(ArrayLinks);\n  }, []);\n  return (\n    <div id=\"Container-Redirect\">\n      <h1>Multi Qr Code</h1>\n      <div id=\"Container-Links\">\n        <h2>Links</h2>\n        <div id=\"ListLinks\">\n          {Links.map((value) => {\n            return (\n              <RedirectLink\n                LinkTo={value.link}\n                Title={value.title}\n                key={value.link.length}\n              />\n            );\n          })}\n        </div>\n      </div>\n      <Link to=\"/\" id=\"LinkHome\">\n        Crie seu Pr√≥prio Qr Code\n      </Link>\n    </div>\n  );\n}\n\nexport default Redirect;\n","import React from 'react';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport PageHome from './pages/Home';\nimport PageRedirect from './pages/Redirect';\n\nfunction Router() {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\" component={PageHome} />\n        <Route path=\"/redirect/:link\" component={PageRedirect} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}